name: reusable-plan
on:
  workflow_call:
    inputs:
      rootModule:
        description: Defines root module directory
        required: true
        type: string
      # releaseType:
      #  description: 'Defines github release type'
      #  required: true
      #  type: string
      artifactsRetentionDays:
        description: How many days artifacts should be stored
        required: false
        type: number
        default: 5
      terraformVersion:
        description: Defines terraform version to use
        required: true
        type: string
      environment:
        description: Environment to run tests against
        type: string
        required: true
#    secrets:
#      githubToken:
#        description: 'GitHub Token value'
#        required: true
#
#      GH_APP_ID:
#        description: 'GitHub Application ID'
#        required: false
#
#      GH_APP_PEM_FILE:
#        description: 'GitHub Application private key'
#        required: false
#
#      GH_APP_INSTALLATION_ID:
#        description: 'GitHub Application Installation Id'
#        required: false
#
#      s3StateBucket:
#        description: "S3 State Bucket"
#        required: true
#
#      awsRootAccountId:
#        description: "Root Account ID"
#        required: true
#
#      GH_ORG:
#        description: 'GitHub Organisation'
#        required: true
jobs:
  plan:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-22.04
    permissions: write-all # try if 'Resource not accessible by integration' is fixed
    # name: "Root Module: ${{ inputs.rootModule }}"
    name: plan
    defaults:
      run:
        working-directory: terraform/${{ inputs.rootModule }}
    steps:
      - name: Terraform-Setup
        uses: opentofu/setup-opentofu@12f4debbf681675350b6cd1f0ff8ecfbda62027b # v1.0.4
        # with:
        # terraform_version: ${{ inputs.terraformVersion }}
      - name: Checkout
        uses: actions/checkout@v4
      - name: Generate token # Why ?
        #  env:
        #    APP_ID: ${{ secrets.GH_APP_ID }}
        #    PRIVATE_KEY: ${{ secrets.GH_APP_PEM_FILE }}
        #  if: ${{ env.APP_ID != null && env.PRIVATE_KEY != null }}
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v.2.1.0
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PEM_FILE }}
      - name: authenticate to git with app token # Why ?
        #  env:
        #    APP_ID: ${{ secrets.GH_APP_ID }}
        #    PRIVATE_KEY: ${{ secrets.GH_APP_PEM_FILE }}
        #  if: ${{ env.APP_ID != null && env.PRIVATE_KEY != null }}
        run: |
          echo ${{ steps.generate_token.outputs.token }} | gh auth login --with-token
          gh auth setup-git
      - name: Authenticate # to access S3 bucket in init step
        uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_NUMBER }}:role/AWS-GitHubActions-OIDC_role # FIX ROLE NAME role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_NUMBER}}:role/github-actions-plan
          role-session-name: GitHubActions
          aws-region: eu-north-1
      - name: Define variables
        id: vars
        run: |
          mkdir metadata
          PLAN_FILE="$(realpath metadata)/plan-${{ inputs.rootModule }}-${{ github.event.pull_request.head.sha }}.planfile"
          SUMMARY_FILE="$(realpath metadata)/summary.md"
          echo "plan_file=${PLAN_FILE}" >> $GITHUB_OUTPUT
          echo "summary_file=${SUMMARY_FILE}" >> $GITHUB_OUTPUT
          ROOT_MODULE="${{ inputs.rootModule }}"
          ROOT_MODULE_METADATA=${ROOT_MODULE}-metadata
          echo "root_module=${ROOT_MODULE}" >> $GITHUB_OUTPUT
          echo "root_module_metadata=${ROOT_MODULE_METADATA}" >> $GITHUB_OUTPUT
      - name: Label PR with module name
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        if: ${{ github.event_name == 'pull_request' }}
        id: label
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["${{ steps.vars.outputs.root_module }}"]
            })
      - name: Detect previous version number # from release tags like v2.0.1
        uses: actions/github-script@v7
        id: prev-version
        env:
          PACKAGE_NAME: ${{ steps.vars.outputs.root_module }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const query = `query($owner: String!, $repo: String!, $refPrefix: String!) {
              repository(owner: $owner, name: $repo) {
                refs(refPrefix: $refPrefix, first: 1, orderBy: {field: TAG_COMMIT_DATE, direction: DESC}) {
                  edges { node { name } }
                }
              }
            }`;
            const result = await github.graphql(query, { owner, repo,
              refPrefix: `refs/tags/${process.env.PACKAGE_NAME}/`,
            });
            const prevNode = result.repository.refs.edges[0];
            const prevVer = prevNode ? prevNode.node.name.substring(1) : '0.0.0';
            console.log('Found previous version', prevVer);
            return prevVer;
          result-encoding: string
      - name: Determine new version number
        uses: actions/github-script@v7
        id: new-version
        env:
          PREV_VERSION: ${{ steps.prev-version.outputs.result }}
          RELEASE_TYPE: ${{ inputs.environment }}
        with:
          script: |
            const { PREV_VERSION, RELEASE_TYPE } = process.env;
            console.log('Previous version was', PREV_VERSION);
            console.log('Release type is', RELEASE_TYPE);
            const numbers = PREV_VERSION.split('.');
            const numberIdx = ['major', 'minor', 'patch'].indexOf(RELEASE_TYPE);
            numbers[numberIdx] = parseInt(numbers[numberIdx]) + 1;
            for (let i = numberIdx + 1; i < numbers.length; i++) {
              numbers[i] = 0;
            }
            return numbers.join('.');
          result-encoding: string
      - name: Store version numbers
        # env:
        #    PR_URL: ${{github.event.pull_request.html_url}}
        #    GITHUB_TOKEN: ${{secrets.githubToken}}
        run: |
          mkdir output
          echo 'v${{ steps.prev-version.outputs.result }}' > output/previous-version.txt
          echo 'v${{ steps.new-version.outputs.result }}' > output/new-version.txt
      - name: Extract changelog entry
        uses: actions/github-script@v7
        env:
          ROOT_MODULE: ${{ inputs.rootModule }}
        with:
          script: | 
            const { writeFile } = require('fs').promises;
  
            // Define an async function
            async function updatePRAndWriteChangelog() {
              const rootModule = process.env.ROOT_MODULE;
              const { owner, repo } = context.repo;
            
              // Get PR information
              const { data: prInfo } = await github.rest.pulls.get({
                owner,
                repo,
                pull_number: context.issue.number,
              });
            
              // Check if the PR body is empty
              if (!prInfo.body || prInfo.body.trim() === "") {
                console.log("PR body is empty. Adding default changelog message.");
                prInfo.body = "Changelog: Please provide a changelog entry for this PR.";
              }
            
              // Update the PR body with the appended changelog
              const updatedBody = `${prInfo.body.trim()}
            
            ## Changelog
            \`\`\`
            Your changelog content here
            \`\`\``;
            
              await github.rest.pulls.update({
                owner,
                repo,
                pull_number: context.issue.number,
                body: updatedBody,
              });
            
              // Extract the 'Changelog' section from the updated PR body
              const changelogSection = updatedBody.match(/## Changelog[\r\n]+```([\s\S]*?)```/);
              const changelogEntry = changelogSection ? changelogSection[1].trim() : null;
            
              if (!changelogEntry) {
                throw new Error("'Changelog' section not found in PR body! Please add it back.");
              }
              if (changelogEntry.match(/^TODO:/m)) {
                throw new Error("'Changelog' section needs proper text, instead of 'TODO'");
              }
            
              console.log("Found PR body:");
              console.log(updatedBody);
              console.log("Extracted Changelog Entry:", changelogEntry);

              // Ensure the directory exists
              const outputPath = "output/";
              await mkdir(outputPath, { recursive: true });
            
              // Write the changelog entry to a file
              console.log(process.cwd());
              await writeFile(
                "output/changelog.md",
                `
            * PR [#${prInfo.number}](${prInfo.html_url}) - ${prInfo.title}
            \`\`\`
            ${changelogEntry}
            \`\`\`
            `.trimLeft(),
                { encoding: "utf-8" }
              );

              console.log("Changelog written successfully");
            }
            
            // Call the async function
            updatePRAndWriteChangelog().catch((error) => {
              console.error("Unhandled error:", error.message);
            });
      - name: Document example 'source' line
        run: |
          cat > output/documentation.md <<'EOF'
          # Module Location
          To use this module in your Terraform, use the below source value.
          ```hcl
          module "${{ inputs.rootModule }}" {
            source = "git::${{ github.server_url }}/${{ github.repository }}.git?ref=${{ inputs.rootModule }}/v${{ steps.new-version.outputs.result }}"
            # also any inputs for the module (see below)
          }
          ```
          EOF
      - name: Install terraform docs
        run: |
          wget https://github.com/terraform-docs/terraform-docs/releases/download/v0.15.0/terraform-docs-v0.15.0-linux-amd64.tar.gz \
            --output-document - \
            --progress dot:mega \
          | tar -xvz
      - name: Render terraform docs
        run: |
          echo '# Module Attributes' >> output/documentation.md
          ./terraform-docs markdown table \
            --output-file "$(pwd)"/output/documentation.md \
            --sort-by required .

            #- name: Bundle up Terraform module
            # working-directory: ${{ inputs.moduleRootDirectory }}/output
            # run: zip -vr ${{ inputs.moduleRootDirectory }}/output/terraform-module.zip *
      - name: Display files
        run: ls -R
      - name: Install tfcmt
        uses: jaxxstorm/action-install-gh-release@71d17cb091aa850acb2a1a4cf87258d183eb941b # v1.11.0
        with:
          repo: suzuki-shunsuke/tfcmt
          tag: v4.14.0
      - name: Init
        run: |
          tofu init -upgrade \
          -backend-config key=${{ github.event.repository.name }}/${{ steps.vars.outputs.root_module }} \
          -backend-config bucket=${{ secrets.S3_STATE_BUCKET }} \
          -backend-config dynamodb_table=${{ secrets.S3_STATE_BUCKET }}-lock \
          -var tf_cost_center=${{ secrets.COST_CENTER }} \
          -var tf_stage=${{ inputs.environment }} \
          -var tf_repo=${{ github.event.repository.name }} \
          -var tf_module=${{ inputs.rootModule }} \
          -var tf_aws_account_number=${{ secrets.AWS_ACCOUNT_NUMBER }} \
          -var tf_aws_account_name=${{ secrets.AWS_ACCOUNT_NAME }} \
          -var tf_pull_request=${{ github.event.pull_request.url }} \
          -compact-warnings
      - name: Terraform Plan
        env:
          GITHUB_APP_ID: ${{ secrets.GH_APP_ID }} # TODO: only include these in the github root module
          GITHUB_APP_INSTALLATION_ID: ${{ secrets.GH_APP_INSTALLATION_ID }}
          GITHUB_APP_PEM_FILE: ${{ secrets.GH_APP_PEM_FILE }}
        run: |
          set +e  # don't exit on error
          TERRAFORM_OUTPUT_FILE="./terraform-${GITHUB_RUN_ID}-output.txt"
          #-owner "${{ github.repository_owner }}" \
          #-repo "${{ github.event.repository.name }}" \
          #-var "target:${{ inputs.rootModule }}" \
          #-var "commitSHA:${{ github.event.pull_request.head.sha }}" \
          #-var "job:${{ github.job }}" \
          #-var "logoImage:'https://itoc.dk/_img/hellpoundercorp.png'" \
          #-var "logoUrl:https://jppol.dk'" \
          #-var "infracost_enabled: true" \
          #-var "driftModeEnabled: true" \
          # --log-level $([[ "asdf" == "true" ]] && echo "DEBUG" || echo "INFO") \
          tfcmt \
          --config ../../config/summary.yaml \
          --output ${{ steps.vars.outputs.summary_file }} \
          plan -- \
            tofu plan \
            -var tf_github_org=${{ secrets.GH_ORG }} \
            -var tf_cost_center=${{ secrets.COST_CENTER }} \
            -var tf_stage=${{ inputs.environment }} \
            -var tf_repo=${{ github.event.repository.name }} \
            -var tf_module=${{ inputs.rootModule }} \
            -var tf_aws_account_number=${{ secrets.AWS_ACCOUNT_NUMBER }} \
            -var tf_aws_account_name=${{ secrets.AWS_ACCOUNT_NAME }} \
            -var tf_pull_request=${{ github.event.pull_request.url }} \
            -out=${{ steps.vars.outputs.plan_file }} \
            -lock=false \
            -input=false \
            -no-color \
            -detailed-exitcode \
          &> ${TERRAFORM_OUTPUT_FILE}
          TERRAFORM_RESULT=$?
          echo "Terraform exitcode: $TERRAFORM_RESULT"
          echo "source: ${{ steps.vars.outputs.plan_file }}"
          cat "${TERRAFORM_OUTPUT_FILE}"
          # tofu show -no-color "${{ steps.vars.outputs.plan_file }}" >> $GITHUB_STEP_SUMMARY
          cat "${{ steps.vars.outputs.summary_file }}" >> $GITHUB_STEP_SUMMARY
          control_count=0
          HAS_DESTROY=false
          HAS_CHANGES=false
          HAS_NO_CHANGES=false
          HAS_ERROR=false
          # if [[ "${TERRAFORM_RESULT}" == "0" ]]; then  #  no terraform changes
          if grep -q '^No changes. Your infrastructure matches the configuration.' ${TERRAFORM_OUTPUT_FILE} ; then
            echo "Exiting - no changes found"
            # exit 1  #  do not exit on empty configuration, apply step should skip this rootModule
            HAS_NO_CHANGES=true
            ((control_count++))
            PLAN_STATUS="has_no_changes"
          elif grep -qP '^Plan: \d+ to add, \d+ to change, 0 to destroy.' ${TERRAFORM_OUTPUT_FILE} ; then
            # elif [[ "${TERRAFORM_RESULT}" == "2" ]]; then  #  terraform changes
            echo "Found changes (no resources will be destroyed)"
            HAS_CHANGES=true
            ((control_count++))
            PLAN_STATUS="has_changes"
          elif grep -qP '^Plan: \d+ to add, \d+ to change, [1-9]{1}\d* to destroy.' ${TERRAFORM_OUTPUT_FILE} ; then
            HAS_DESTROY=true
            echo "Found changes (resources will be destroyed)"
            ((control_count++))
            PLAN_STATUS="has_destroy"
            # fi
          elif grep -q '^Error: ' ; then
            HAS_ERROR=true
            echo "Error appears"
            ((control_count++))
            PLAN_STATUS="has_error"
            exit 1
          fi
          set -e
          if [[ ! $control_count -eq 1 ]]; then
            echo "Control_count=$control_count - Bad coding"
            exit 1
          fi

          # reusable matrix jobs cannot output variables, so we upload artifact
          echo ${PLAN_STATUS} > output/plan_status-${{ github.event.pull_request.head.sha }}-${{ steps.vars.outputs.root_module }}.txt

          # One of changes, no-changes, error should be true
          echo "has_changes=${HAS_CHANGES}" >> $GITHUB_OUTPUT
          echo "has_destroy=${HAS_DESTROY}" >> $GITHUB_OUTPUT
          echo "has_no_changes=${HAS_NO_CHANGES}" >> $GITHUB_OUTPUT
          echo "has_error=${HAS_ERROR}" >> $GITHUB_OUTPUT
          echo "result=${TERRAFORM_RESULT}" >> $GITHUB_OUTPUT
          rm -f ${TERRAFORM_OUTPUT_FILE}
      - name: Upload result artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.root_module_metadata }}-${{ github.event.pull_request.head.sha }}
          path: terraform/${{ inputs.rootModule }}/output/
          # retention-days: ${{ inputs.artifactsRetentionDays }}
      - name: Store plan
        run: |-
          aws s3 cp ${{ steps.vars.outputs.plan_file }} \
          s3://${{ secrets.S3_STATE_BUCKET }}/${{ github.event.repository.name }}/metadata/ --sse
