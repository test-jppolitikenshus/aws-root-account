name: reusable/plan
on:
  workflow_call:
    inputs:
      moduleRootDirectory:
        description: 'Defines root module directory'
        required: true
        type: string

      releaseType:
        description: 'Defines github release type'
        required: true
        type: string

      artifactsRetentionDays:
        description: 'How many days artifacts should be stored'
        required: false
        type: number
        default: 5

    secrets:
      githubToken:
        description: 'GitHub Token value'
        required: true

jobs:
  plan:
    runs-on: ubuntu-latest
    permissions: write-all # try if 'Resource not accessible by integration' is fixed
    name: 'Module: ${{ inputs.moduleRootDirectory }}'
    defaults:
      run:
        working-directory: ${{ github.event.repository.name }}/${{ inputs.moduleRootDirectory }}
    steps:
      - name: Label PR with module name
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        if: ${{ github.event_name == 'pull_request' }}
        id: label
        with:
          github-token: ${{ secrets.githubToken }}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["${{ inputs.moduleRootDirectory }}"]
            })

      - name: Define variables
        id: vars
        run: |
          mkdir metadata
          PLAN_FILE="$(realpath metadata)/${{ inputs.moduleRootDirectory }}-${{ github.event.pull_request.head.sha }}.planfile"
          SUMMARY_FILE="$(realpath metadata)/summary.md"

          echo "plan_file=${PLAN_FILE}" >> $GITHUB_OUTPUT
          echo "summary_file=${SUMMARY_FILE}" >> $GITHUB_OUTPUT

      - name: Install tfcmt
        uses: jaxxstorm/action-install-gh-release@v1.10.0 # v1.11.0
        with:
          repo: suzuki-shunsuke/tfcmt
          tag: v4.6.0

      - name: Terraform Plan
        run: |
          set +e  # don't exit on error
          TERRAFORM_OUTPUT_FILE="./terraform-${GITHUB_RUN_ID}-output.txt"

          tfcmt \
          --config ../../config/summary.yaml \
          -owner "${{ github.repository_owner }}" \
          -repo "${{ github.event.repository.name }}" \
          -var "target:${{ inputs.moduleRootDirectory }}" \
          -var "commitSHA:${{ github.event.pull_request.head.sha }}" \
          -var "job:${{ github.job }}" \
          -var "logoImage:'https://itoc.dk/_img/hellpoundercorp.png'" \
          -var "logoUrl:https://jppol.dk'" \
          -var "infracost_enabled: true" \
          -var "driftModeEnabled: true" \
          --output ${{ steps.vars.outputs.summary_file }} \
          --log-level $([[ "asdf" == "true" ]] && echo "DEBUG" || echo "INFO") \
          plan -- \
            terraform plan \
            -var github_org=${{ secrets.GH_ORG }} \
            -var cost_center="9910" \
            -out=${{ steps.vars.outputs.plan_file }} \
            -lock=false \
            -input=false \
            -no-color \
          &> ${TERRAFORM_OUTPUT_FILE}

          TERRAFORM_RESULT=$?

          echo "source: ${{ steps.vars.outputs.plan_file }}"

          set -e

          cat "${TERRAFORM_OUTPUT_FILE}"

          HAS_CHANGES=false
          HAS_NO_CHANGES=false
          HAS_ERROR=false
          if [[ "${TERRAFORM_RESULT}" == "0" ]]; then
            if grep -q '^No changes. Your infrastructure matches the configuration.' ${TERRAFORM_OUTPUT_FILE} ; then
              echo "No changes found"
              HAS_NO_CHANGES=true
            else
              HAS_CHANGES=true
              echo "Found changes"
            fi
          else
            HAS_ERROR=true
            echo "Error appears"
          fi

          # One of changes, no-changes, error should be true
          echo "changes=${HAS_CHANGES}" >> $GITHUB_OUTPUT
          echo "no-changes=${HAS_NO_CHANGES}" >> $GITHUB_OUTPUT
          echo "error=${HAS_ERROR}" >> $GITHUB_OUTPUT

          echo "result=${TERRAFORM_RESULT}" >> $GITHUB_OUTPUT

          rm -f ${TERRAFORM_OUTPUT_FILE}

      - name: Store plan
        run: |
           aws s3 cp ${{ steps.vars.outputs.plan_file }} \
           s3://${{ secrets.S3_STATE_BUCKET }}/${{ github.event.repository.name }}/metadata/ --sse
