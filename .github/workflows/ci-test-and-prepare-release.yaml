name: 'CI/test and prepare release'
concurrency:  #avoid concurrent runs on label events, might cause issues on super fast commits  ¯\_(ツ)_/¯
  group: ${{ github.head_ref }}
  cancel-in-progress: true


on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
  pull_request_target: # in case of PRs from forks
    types: [closed]

jobs:
  detect:
    environment: test
    runs-on: ubuntu-latest
    name: 'Detect pull request context'
    outputs:
      directories: ${{ steps.condense.outputs.result }}
      release-type: ${{ steps.check_pr_label.outputs.release-type}}
      is-merge-event: >- # yaml folded style with stripped newlines
        ${{ github.event_name == 'pull_request_target'
         && github.event.action == 'closed'
         && github.event.pull_request.merged == true }}
    steps:
      # I'm getting the labels from the API and not the context("contains(github.event.pull_request.labels.*.name, 'Env Promote')") as the labels
      # are added in 2nd API call so they aren't included in the PR context
    - name: Check PR labels
      id: check_pr_label
      env:
        PR_URL: ${{github.event.pull_request.html_url}}
          #GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        GH_TOKEN: ${{ github.token }}
      run: |
        LABELS=$(gh pr view $PR_URL --json labels  --jq '.labels[]| select ((.name=="test") or (.name=="prod") or (.name=="no-release")) |.name')
        NUMBER_OF_LABELS=$(echo "$LABELS" |wc -w)
        if [ "$NUMBER_OF_LABELS" -eq "1" ] ; then
          echo "Found: $LABELS"
            #echo "::set-output name=release-type::$LABELS"
          echo "release-type=${LABELS}" >> $GITHUB_OUTPUT
        elif [ "$NUMBER_OF_LABELS" -gt "1" ] ; then
          echo "::error ::Too many release type labels: $( echo $LABELS | tr '\n' ' ' )"
          exit 1
        else
          echo "::error ::No release type labels found(test/prod/no-release)"
          exit 2
        fi
    - name: Get changed files
      uses: Ana06/get-changed-files@e0c398b7065a8d84700c471b6afc4116d1ba4e96 # v2.2.0
      id: raw-files
      with:
        format: 'json'
    - name: Condense to directory list
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      id: condense
      env:
        RAW_FILES: '${{ steps.raw-files.outputs.all }}'
      with:
        script: |
          const raw = JSON.parse(process.env.RAW_FILES);
          const directories = Array.from(new Set(raw
            .filter(x => !x.startsWith('.'))
            .filter(x => x.includes('/'))
            .map(x => x.substring(0, x.lastIndexOf('/')))   // remove file name
          ));
          if (directories.length < 1) return {};
          return {
            include: directories.map(directory => ({ directory })),
          };

  validate:
    permissions: write-all
    needs: detect
    if: ${{ needs.detect.outputs.directories != '{}' && github.event.action != 'closed' }}
    strategy:
      matrix: "${{ fromJson(needs.detect.outputs.directories) }}"
      fail-fast: false
    uses: ./.github/workflows/reusable-validate.yaml
    with:
      terraformVersion: '1.3.4'
      moduleRootDirectory: ${{ matrix.directory }}
    secrets:
      GH_APP_ID: ${{ secrets.GH_APP_ID }}
      GH_APP_PEM_FILE: ${{ secrets.GH_APP_PEM_FILE }}
      GH_APP_INSTALLATION_ID: ${{ secrets.GH_APP_INSTALLATION_ID }}
      s3StateBucket: ${{ secrets.S3_STATE_BUCKET }}
      awsRootAccountId: ${{ secrets.AWS_ROOT_ACCOUNT_ID }}

  lint:
    needs: detect
    if: ${{ needs.detect.outputs.directories != '{}' && github.event.action != 'closed' }}
    strategy:
      matrix: "${{ fromJson(needs.detect.outputs.directories) }}"
      fail-fast: false
    uses: ./.github/workflows/reusable-lint.yaml
    with:
      moduleRootDirectory: ${{ matrix.directory }}
      tflintVersion: 'v0.48.0'
    secrets:
      githubToken: ${{ secrets.GITHUB_TOKEN }}

  analysis:
    needs: detect
    if: ${{ needs.detect.outputs.directories != '{}' && github.event.action != 'closed' }}
    strategy:
      matrix: "${{ fromJson(needs.detect.outputs.directories) }}"
      fail-fast: false
    uses: ./.github/workflows/reusable-analysis.yaml
    with:
      moduleRootDirectory: ${{ matrix.directory }}
    secrets:
      githubToken: ${{ secrets.GITHUB_TOKEN }}

  plan:
    permissions: write-all
    needs: detect
    if: ${{ needs.detect.outputs.directories != '{}' && ( needs.detect.outputs.is-merge-event == 'true' || github.event.action != 'closed' )}}
    strategy:
      matrix: "${{ fromJson(needs.detect.outputs.directories) }}"
      fail-fast: false
    uses: ./.github/workflows/reusable-plan.yaml
    with:
      moduleRootDirectory: ${{ matrix.directory }}
      releaseType: ${{ needs.detect.outputs.release-type }}
      terraformVersion: '1.5.2'
    secrets:
      githubToken: ${{ secrets.GITHUB_TOKEN }}
      GH_APP_ID: ${{ secrets.GH_APP_ID }}
      GH_APP_PEM_FILE: ${{ secrets.GH_APP_PEM_FILE }}
      GH_APP_INSTALLATION_ID: ${{ secrets.GH_APP_INSTALLATION_ID }}
      s3StateBucket: ${{ secrets.S3_STATE_BUCKET }}
      awsRootAccountId: ${{ secrets.AWS_ROOT_ACCOUNT_ID }}

  comment:
    permissions: write-all
    needs: [detect, plan]
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    name: 'Comment on PR'
    steps:
      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number: issue_number } = context.issue;
            const { readdir, readFile } = require('fs').promises;
            const utf8 = { encoding: 'utf-8' };
            const lines = [
              '# Release plan', '',
              '| Directory | Previous version | New version |',
              '|--|--|--|',
            ];
            const sections = [];
            for (const folder of await readdir('outputs', { withFileTypes: true })) {
              if (!folder.isDirectory()) continue;
              const readText = (name) => readFile(name, utf8).then(x => x.trim());
              lines.push('| '+[
                `\`${folder.name}\``,
                `${await readText(`outputs/${folder.name}/previous-version.txt`)}`,
                `**${await readText(`outputs/${folder.name}/new-version.txt`)}**`,
              ].join(' | ')+' |');
              sections.push(`<details><summary>Changelog preview: ${folder.name}</summary>\n\n${await readText(`outputs/${folder.name}/changelog.md`)}\n</details>`);
            }
            const finalBody = [lines.join('\n'), ...sections].join('\n\n');
            const {data: allComments} = await github.rest.issues.listComments({ issue_number, owner, repo });
            const ourComments = allComments
              .filter(comment => comment.user.login === 'github-actions[bot]')
              .filter(comment => comment.body.startsWith(lines[0]+'\n'));
            const latestComment = ourComments.slice(-1)[0];
            if (latestComment && latestComment.body === finalBody) {
              console.log('Existing comment is already up to date.');
              return;
            }
            const {data: newComment} = await github.rest.issues.createComment({ issue_number, owner, repo, body: finalBody });
            console.log('Posted comment', newComment.id, '@', newComment.html_url);
            // Delete all our previous comments
            for (const comment of ourComments) {
              if (comment.id === newComment.id) continue;
              console.log('Deleting previous PR comment from', comment.created_at);
              await github.rest.issues.deleteComment({ comment_id: comment.id, owner, repo });
            }
