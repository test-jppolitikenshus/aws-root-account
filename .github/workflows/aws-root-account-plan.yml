name: terraform plan (aws-root-account)

on:
  push:
    branches: [ "main" ]
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/workflows/aws-root-account-plan.yml'
      - '.github/workflows/aws-root-account-apply.yml'
  workflow_dispatch:

jobs:
  plan:
    environment: test
    runs-on: ubuntu-latest
    outputs:
      RESULT: ${{ env.RESULT }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        #- uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1
        #with:
        #  #role-to-assume: arn:aws:iam::${{secrets.AWS_ROOT_ACCOUNT_ID}}:role/github-actions-plan
        #  role-to-assume: arn:aws:iam::${{secrets.AWS_ROOT_ACCOUNT}}:role/AWS-GitHubActions-OIDC_role
        #  role-session-name: GitHubActions
        #  aws-region: eu-north-1





            #- uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36 # v3.0.0
            #  with:
            #    terraform_version: 1.5.2
            #- run: terraform fmt -check
            #  continue-on-error: true
            #- run: terraform init
            #- run: terraform validate -no-color
            #- run: terraform plan -no-color
            #
            #      - name: Get changed root dirs
            #        id: changed-dirs
            #        uses: tj-actions/changed-files@v42
            #        with:
            #          dir_names: "true"
            #
            #      - name: List all changed dirs
            #        env:
            #          ALL_CHANGED_FILES: ${{ steps.changed-dirs.outputs.all_changed_files }}
            #        run: |
            #          for dir in ${ALL_CHANGED_FILES}; do
            #            echo "$dir was changed"
            #          done
            #
            #
            #      - name: Get changed files
            #        id: changed-files
            #        uses: tj-actions/changed-files@v42
            #
            #      - name: List all changed files
            #        env:
            #          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
            #        run: |
            #          for file in ${ALL_CHANGED_FILES}; do
            #            echo "$file was changed"
            #          done
            #
      - name: Identify updated directories in PR (or push)
        id: changed-files-dir-names
        uses: tj-actions/changed-files@v42
        with:
          dir_names: "true"
          dir_names_exclude_current_dir: "true"
          dir_names_include_files: '[0-9]*'
          dir_names_max_depth: "2"

      - name: List all changed directories
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files-dir-names.outputs.all_changed_files }}
        run: |
          for file in ${ALL_CHANGED_FILES}; do
            echo "$file was changed"
          done

      - name: Filter out root modules to work on
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files-dir-names.outputs.all_changed_files }}
        run: |
          for path in ${ALL_CHANGED_FILES}; do    # this is a string with the affected modules separated by a space
            case ${path##*/} in                   # only consider directories starting with two digits eg. "terraform/01.something"
              ([0-9][0-9].*)
              RESULT="${path} ${RESULT}"
              ;;
              (*)
              ;;
            esac
          done
          echo RESULT=$(printf "\"%s\"\n" $RESULT |sort -t/ -k2n|tr -s '\n\r' ','|sed 's/,$//'|sed 's/^\(.*\)/[\1]/') >> $GITHUB_ENV  # sort output and sanitize to match required format
          #echo RESULT='["9.0.0","11.0.0"]' >> $GITHUB_ENV  # this is the required format

      - name: Lets see what to do
        env:
          RESULT: ${{ env.RESULT }}
        run: |
          echo "This is it: $RESULT"

  terraform_plan:
    environment: test
    runs-on: ubuntu-latest
    needs: plan
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ./${{ matrix.root-module }}
    strategy:
      matrix: 
        root-module: ${{ fromJson(needs.plan.outputs.RESULT) }}   # fromJson is apparently the only way to feed array to GHA
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1
        with:
          # FIX ROLE NAME role-to-assume: arn:aws:iam::${{secrets.AWS_ROOT_ACCOUNT_ID}}:role/github-actions-plan
          role-to-assume: arn:aws:iam::${{secrets.AWS_ROOT_ACCOUNT_ID}}:role/AWS-GitHubActions-OIDC_role
          role-session-name: GitHubActions
          aws-region: eu-north-1
      
      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36 # v3.0.0
        with:
          terraform_version: 1.5.2
      
      - name: Terraform fmt
        run: terraform fmt -check
        continue-on-error: true
      
      - name: Terraform Init
        run: terraform init -backend-config key=aws-root-account/${{ matrix.root-module }} -backend-config ../stage/${{ environment }}/backend.tfvars #-compact-warnings
      
      - name: Terraform Validate
        run: terraform validate -no-color
      
      #- run: terraform plan -no-color
      - name: Say hello
        run: |
          echo "hello world ${{ matrix.root-module }}"
