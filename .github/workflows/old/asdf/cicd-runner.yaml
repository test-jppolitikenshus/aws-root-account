name: 'cicd reusable runner'
concurrency:  #avoid concurrent runs on label events, might cause issues on super fast commits  ¯\_(ツ)_/¯
  group: ${{ github.head_ref }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to run tests against'
        type: string
        required: true

jobs:
  validate:
    permissions: write-all
    if: ${{ needs.detect.outputs.directories != '{}' && github.event.action != 'closed' }}
    strategy:
      matrix: "${{ fromJson(needs.detect.outputs.directories) }}"
      fail-fast: false
    uses: ./.github/workflows/reusable-validate.yaml
    with:
      terraformVersion: '1.3.4'
      moduleRootDirectory: ${{ matrix.directory }}
      environment: ${{ inputs.environment }}
    secrets:
      GH_APP_ID: ${{ secrets.GH_APP_ID }}
      GH_APP_PEM_FILE: ${{ secrets.GH_APP_PEM_FILE }}
      GH_APP_INSTALLATION_ID: ${{ secrets.GH_APP_INSTALLATION_ID }}
      s3StateBucket: ${{ secrets.S3_STATE_BUCKET }}
      awsRootAccountId: ${{ secrets.AWS_ROOT_ACCOUNT_ID }}

  lint:
    if: ${{ needs.detect.outputs.directories != '{}' && github.event.action != 'closed' }}
    strategy:
      matrix: "${{ fromJson(needs.detect.outputs.directories) }}"
      fail-fast: false
    uses: ./.github/workflows/reusable-lint.yaml
    with:
      moduleRootDirectory: ${{ matrix.directory }}
      tflintVersion: 'v0.48.0'
      environment: ${{ inputs.environment }}
    secrets:
      githubToken: ${{ secrets.GITHUB_TOKEN }}

  analysis:
    if: ${{ needs.detect.outputs.directories != '{}' && github.event.action != 'closed' }}
    strategy:
      matrix: "${{ fromJson(needs.detect.outputs.directories) }}"
      fail-fast: false
    uses: ./.github/workflows/reusable-analysis.yaml
    with:
      moduleRootDirectory: ${{ matrix.directory }}
      environment: ${{ inputs.environment }}
    secrets:
      githubToken: ${{ secrets.GITHUB_TOKEN }}

  plan:
    permissions: write-all
    if: ${{ needs.detect.outputs.directories != '{}' && ( needs.detect.outputs.is-merge-event == 'true' || github.event.action != 'closed' )}}
    strategy:
      matrix: "${{ fromJson(needs.detect.outputs.directories) }}"
      fail-fast: false
    uses: ./.github/workflows/reusable-plan.yaml
    with:
      moduleRootDirectory: ${{ matrix.directory }}
      releaseType: ${{ needs.detect.outputs.release-type }}
      terraformVersion: '1.5.2'
      environment: ${{ inputs.environment }}
    secrets:
      githubToken: ${{ secrets.GITHUB_TOKEN }}
      GH_APP_ID: ${{ secrets.GH_APP_ID }}
      GH_APP_PEM_FILE: ${{ secrets.GH_APP_PEM_FILE }}
      GH_APP_INSTALLATION_ID: ${{ secrets.GH_APP_INSTALLATION_ID }}
      s3StateBucket: ${{ secrets.S3_STATE_BUCKET }}
      awsRootAccountId: ${{ secrets.AWS_ROOT_ACCOUNT_ID }}
      GH_ORG: ${{ secrets.GH_ORG }}


  apply-approve:
    strategy:
      matrix: "${{ fromJson(needs.detect.outputs.directories) }}"
      fail-fast: false
  
  apply:
    permissions: write-all
    needs: [detect, plan]
    if: ${{ needs.detect.outputs.directories != '{}' && ( needs.detect.outputs.is-merge-event == 'true' || github.event.action != 'closed' )}}
    strategy:
      matrix: "${{ fromJson(needs.detect.outputs.directories) }}"
      fail-fast: false
    uses: ./.github/workflows/reusable-apply.yaml
    with:
      moduleRootDirectory: ${{ matrix.directory }}
      releaseType: ${{ needs.detect.outputs.release-type }}
      terraformVersion: '1.5.2'
      environment: ${{ inputs.environment }}
    secrets:
      githubToken: ${{ secrets.GITHUB_TOKEN }}
      GH_APP_ID: ${{ secrets.GH_APP_ID }}
      GH_APP_PEM_FILE: ${{ secrets.GH_APP_PEM_FILE }}
      GH_APP_INSTALLATION_ID: ${{ secrets.GH_APP_INSTALLATION_ID }}
      s3StateBucket: ${{ secrets.S3_STATE_BUCKET }}
      awsRootAccountId: ${{ secrets.AWS_ROOT_ACCOUNT_ID }}
      GH_ORG: ${{ secrets.GH_ORG }}

  comment:
    permissions: write-all
    needs: [detect, plan]
    if: github.event.action != 'closed'
    strategy:
      matrix: "${{ fromJson(needs.detect.outputs.directories) }}"
      fail-fast: false
    runs-on: ubuntu-latest
    name: 'Comment on PR'
    steps:
      - uses: actions/download-artifact@v4
        with:
          #path: ${{ matrix.directory }}/output
          path: output

      - name: Display structure of downloaded files
        run: ls -R
          #working-directory: ${{ matrix.directory }}/output
        working-directory: output

      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number: issue_number } = context.issue;
            const { readdir, readFile } = require('fs').promises;
            const utf8 = { encoding: 'utf-8' };
            const lines = [
              '# Release plan', '',
              '| Directory | Previous version | New version |',
              '|--|--|--|',
            ];
            const sections = [];
            for (const folder of await readdir('output', { withFileTypes: true })) {
              if (!folder.isDirectory()) continue;
              const readText = (name) => readFile(name, utf8).then(x => x.trim());
              lines.push('| '+[
                `\`${folder.name}\``,
                `${await readText(`output/${folder.name}/previous-version.txt`)}`,
                `**${await readText(`output/${folder.name}/new-version.txt`)}**`,
              ].join(' | ')+' |');
              sections.push(`<details><summary>Changelog preview: ${folder.name}</summary>\n\n${await readText(`output/${folder.name}/changelog.md`)}\n</details>`);
            }
            const finalBody = [lines.join('\n'), ...sections].join('\n\n');
            const {data: allComments} = await github.rest.issues.listComments({ issue_number, owner, repo });
            const ourComments = allComments
              .filter(comment => comment.user.login === 'github-actions[bot]')
              .filter(comment => comment.body.startsWith(lines[0]+'\n'));
            const latestComment = ourComments.slice(-1)[0];
            if (latestComment && latestComment.body === finalBody) {
              console.log('Existing comment is already up to date.');
              return;
            }
            const {data: newComment} = await github.rest.issues.createComment({ issue_number, owner, repo, body: finalBody });
            console.log('Posted comment', newComment.id, '@', newComment.html_url);
            // Delete all our previous comments
            for (const comment of ourComments) {
              if (comment.id === newComment.id) continue;
              console.log('Deleting previous PR comment from', comment.created_at);
              await github.rest.issues.deleteComment({ comment_id: comment.id, owner, repo });
            }
