---
name: trigger  # Entrypoint for github actions
concurrency:  # avoid concurrent runs on label events, might cause issues on super fast commits  ¯\_(ツ)_/¯
  group: ${{ github.head_ref }}
  cancel-in-progress: true
on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
  workflow_dispatch:
jobs:
  detect:
    # Identify which terraform root module(s) was changed
    runs-on: ubuntu-latest
    name: Detect terraform changes
    outputs:
      directories: ${{ steps.condense.outputs.result }}
      release-type: ${{ steps.check_pr_label.outputs.release-type}}
      is-merge-event: >-
        ${{ github.event_name == 'pull_request_target'
         && github.event.action == 'closed'
         && github.event.pull_request.merged == true }}
    steps:
      #  TODO: create checks for variables 
      #  AWS_ACCOUNT_NAME=
      #  AWS_ACCOUNT_NUMBER=
      #  COST_CENTER=
      #  GH_APP_ID=
      #  GH_APP_INSTALLATION_ID=
      #  GH_APP_PEM_FILE
      #  GH_ORG=
      #  S3_STATE_BUCKET=
      #  Github Environment = PROD/TEST
      - name: Check PR labels
        id: check_pr_label
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          # GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get the labels from the API and not the context("contains(github.event.pull_request.labels.*.name, 'Env Promote')") as the labels
          # are added in 2nd API call so they aren't included in the PR context
          LABELS=$(gh api -H "Accept: application/vnd.github+json" /repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/issues/${{ github.event.pull_request.number }}/labels | jq -r '.[]| select ((.name=="test-deployed") or (.name=="test") or (.name=="prod")) |.name')
          NUMBER_OF_LABELS=$(echo "$LABELS" |wc -w)
          if [ "$NUMBER_OF_LABELS" -eq "0" ] ; then
            echo "::error ::No release type labels found (dev/test/prod)"
            exit 1
          fi
          case "$LABELS" in
            *prod*)
              echo "release-type=prod" >> $GITHUB_OUTPUT
          # exit 0
              ;;
            *test*)
              echo "release-type=test" >> $GITHUB_OUTPUT
          #    exit 0
              ;;
            *test-deployed*)
              echo "release-type=test-deployed" >> $GITHUB_OUTPUT
          #    exit 0
              ;;
          esac
      - name: Get changed files
        uses: Ana06/get-changed-files@25f79e676e7ea1868813e21465014798211fad8c  # v2.3.0
        id: raw-files
        with:
          format: json
      - name: Condense to directory list and match terraform directories (00.main,
          01.network, 02.whatever etc..)
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
        id: condense
        env:
          RAW_FILES: ${{ steps.raw-files.outputs.all }}
        with:
          script: |
            const raw = JSON.parse(process.env.RAW_FILES);
            const directories = Array.from(new Set(raw
              .filter(x => !x.startsWith('.'))                    // Filter out hidden paths
              .filter(x => /^terraform\/\d{2}[^/]*\/?/.test(x))   // Adjust the regex to stop at the first directory under 'terraform'
              .map(x => {
                const matches = x.match(/^(terraform\/\d{2}[^/]*)\/?/);           // Use a match to extract the root directory including 'terraform'
                return matches ? matches[1].replace(/^terraform\//, '') : null;   // Return the matched root directory or null if not matched
              })
              .filter(x => x !== null) // filter out null values
            ));
            if (directories.length < 1) return {};
            return {
              include: directories.map(directory => ({ directory })),
            };
      - name: Dump github context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        shell: bash
        run: |
          echo "$GITHUB_CONTEXT"
      - name: Modules to work on
        run: echo ${{ steps.condense.outputs.result }}
        # dev:
        #  if: contains(github.jobs.detect.outputs.release-type, 'dev')
        #  needs: detect
        #  strategy:
        #    matrix: "${{ fromJson(needs.detect.outputs.directories) }}"
        #    fail-fast: false
        #  uses: ./.github/workflows/ci-runner.yaml
        #  permissions: write-all
        #  with:
        #    environment: dev
        #    rootModule: ${{ matrix.directory }}
    # if: contains(fromJson('["test"]'), github.jobs.detect.outputs.release-type)
    # if: toJson(needs.jobs.outputs.directories) != '{}'
  ci:
    # name: "ci"
    needs: detect
    # runs-on: ubuntu-latest
    # environment: ${{ needs.detect.outputs.release-type }}
    strategy:
      matrix: ${{ fromJson(needs.detect.outputs.directories) }}
      fail-fast: true  # if true, github cancels all in-progress jobs if any matrix job fails
      max-parallel: 1
    # steps:
    #  - name: "CI Runner"
    #    id: ci-runner
    uses: ./.github/workflows/reusable-ci.yaml
    permissions: write-all
    with:
      environment: ${{ needs.detect.outputs.release-type }}
      rootModule: ${{ matrix.directory }}
    secrets: inherit
  cd:
    # name: "CD"
    needs: [detect, ci]
    strategy:
      matrix: ${{ fromJson(needs.detect.outputs.directories) }}
      fail-fast: false
    uses: ./.github/workflows/reusable-cd.yaml
    permissions: write-all
    with:
      environment: ${{ needs.detect.outputs.release-type }}
      rootModule: ${{ matrix.directory }}
    secrets: inherit
  wiki:
    if: ${{ needs.detect.output.release-type == 'prod' }}
    permissions: write-all
    needs: [cd]
    uses: ./.github/workflows/reusable-wiki.yaml
